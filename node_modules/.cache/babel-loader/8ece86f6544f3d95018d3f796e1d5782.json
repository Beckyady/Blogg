{"ast":null,"code":"var _jsxFileName = \"/home/becky/Documents/Official Files/Blog/blogCli/src/components/Accounts/Login.js\";\nimport React from 'react';\nimport '../../assets/Styles/Styles.css';\nimport FormValidator from '../Validator/FormValidator';\nimport axios from 'axios';\nimport toastr from 'toastr';\nimport env from \"../../env\";\nimport bloglogo from '../../assets/Images/bloglogo.png';\nimport Navbar from \"../navbar/Navbar\";\nimport { MDBRow, MDBCol, MDBCard, MDBCardBody, MDBBtn, M } from \"mdbreact\";\nexport default class Login extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = async event => {\n      event.preventDefault();\n      const validation = this.validator.validate(this.state);\n      this.setState({\n        validation\n      });\n      this.submitted = true;\n\n      if (validation.isValid) {\n        try {\n          const res = await axios.post(\"\".concat(env.api, \"/users/login\"), this.state);\n          const token = res.data.data.token;\n          localStorage.setItem('token', token);\n          this.props.history.push('/create-post');\n          console.log(res);\n        } catch (err) {\n          toastr.options.positionClass = \"toast-top-center\";\n          toastr.error('Invalid Credentials, try again');\n        }\n      } else {\n        toastr.options.positionClass = \"toast-top-center\";\n        toastr.warning('Cannot Log In User Make sure all fields are correctly filled');\n      }\n    };\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.validator = new FormValidator([{\n      field: 'username',\n      method: 'isEmpty',\n      validWhen: false,\n      message: 'Username is required'\n    }, {\n      field: 'username',\n      method: 'matches',\n      args: [/^[a-z0-9A-Z\\s]*$/],\n      validWhen: true,\n      message: 'Username can only contain letters and numbers'\n    }, {\n      field: 'password',\n      method: 'isEmpty',\n      validWhen: false,\n      message: 'Password is required'\n    }]);\n    this.state = {\n      username: '',\n      password: '',\n      validation: this.validator.valid(),\n      successmessage: '',\n      errormessage: ''\n    };\n    this.submitted = false;\n  }\n\n  handleInputChange(event) {\n    event.preventDefault();\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  componentDidMount() {\n    const token = localStorage.getItem('token');\n    if (token) return this.props.history.push('/login');\n  }\n\n  render() {\n    let validation = this.submitted ? // if the form has been submitted at least once\n    this.validator.validate(this.state) : // then check validity every time we render\n    this.state.validation;\n    return React.createElement(\"div\", {\n      className: \"container-fluid logincontain \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"bgoverlay\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      className: \"err-success text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, this.state.errormessage), React.createElement(\"h2\", {\n      className: \"err-success text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, this.state.successmessage), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"Login\"), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group {validation.username.isInvalid && 'has-error'}\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      for: \"username\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"Username\"), React.createElement(\"input\", {\n      type: \"text\",\n      className: \"form-control\",\n      id: \"username\",\n      placeholder: \"Username\",\n      name: \"username\",\n      value: this.state.username,\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"help-block\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, validation.username.message)), React.createElement(\"div\", {\n      className: \"form-group {validation.password.isInvalid && 'has-error'}\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      for: \"password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"Password\"), React.createElement(\"input\", {\n      type: \"password\",\n      className: \"form-control\",\n      id: \"password\",\n      placeholder: \"Password\",\n      name: \"password\",\n      value: this.state.password,\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"help-block\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, validation.password.message)), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"submit\",\n      onClick: this.handleSubmit,\n      className: \"btn btn-success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \"Login\"), React.createElement(\"span\", {\n      style: {\n        paddingLeft: 15\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"Don't have an account? \", React.createElement(\"a\", {\n      className: \"btn btn-link\",\n      href: \"/signup\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \" \", React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-dark\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"SIGN UP\"))))))));\n  }\n\n}","map":{"version":3,"sources":["/home/becky/Documents/Official Files/Blog/blogCli/src/components/Accounts/Login.js"],"names":["React","FormValidator","axios","toastr","env","bloglogo","Navbar","MDBRow","MDBCol","MDBCard","MDBCardBody","MDBBtn","M","Login","Component","constructor","props","handleSubmit","event","preventDefault","validation","validator","validate","state","setState","submitted","isValid","res","post","api","token","data","localStorage","setItem","history","push","console","log","err","options","positionClass","error","warning","handleInputChange","bind","field","method","validWhen","message","args","username","password","valid","successmessage","errormessage","target","name","value","componentDidMount","getItem","render","paddingLeft"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../../assets/Styles/Styles.css'\nimport FormValidator from '../Validator/FormValidator';\nimport axios from 'axios';\nimport toastr from 'toastr';\nimport env from \"../../env\";\nimport bloglogo from '../../assets/Images/bloglogo.png';\nimport Navbar from \"../navbar/Navbar\";\nimport { MDBRow, MDBCol, MDBCard, MDBCardBody, MDBBtn, M } from \"mdbreact\";\n\n\n\n\n\nexport default class Login extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n\n\n        this.validator = new FormValidator([\n\n            {\n                field: 'username',\n                method: 'isEmpty',\n                validWhen: false,\n                message: 'Username is required'\n            },\n            {\n                field: 'username',\n                method: 'matches',\n                args: [/^[a-z0-9A-Z\\s]*$/],\n                validWhen: true,\n                message: 'Username can only contain letters and numbers'\n            },\n            {\n                field: 'password',\n                method: 'isEmpty',\n                validWhen: false,\n                message: 'Password is required'\n            }\n        ])\n\n        this.state = {\n            username: '',\n            password: '',\n            validation: this.validator.valid(),\n            successmessage: '',\n            errormessage: '',\n\n        };\n        this.submitted = false;\n    }\n\n    handleInputChange(event) {\n        event.preventDefault()\n        this.setState({ [event.target.name]: event.target.value });\n    }\n\n    handleSubmit = async (event) => {\n        event.preventDefault();\n\n        const validation = this.validator.validate(this.state);\n        this.setState({ validation });\n        this.submitted = true;\n\n        if (validation.isValid) {\n            try {\n                const res = await axios.post(`${env.api}/users/login`, this.state);\n                const token = res.data.data.token;\n\n                localStorage.setItem('token', token);\n\n                this.props.history.push('/create-post');\n                console.log(res);\n            } catch (err) {\n                toastr.options.positionClass = \"toast-top-center\";\n                toastr.error('Invalid Credentials, try again');\n            }\n        }\n        else {\n            toastr.options.positionClass = \"toast-top-center\";\n\n            toastr.warning('Cannot Log In User Make sure all fields are correctly filled');\n        }\n\n    }\n\n    componentDidMount() {\n        const token = localStorage.getItem('token');\n\n        if (token) return this.props.history.push('/login');\n    }\n\n\n\n    render() {\n        let validation = this.submitted ?        // if the form has been submitted at least once\n            this.validator.validate(this.state) :   // then check validity every time we render\n            this.state.validation;\n        return (\n            <div className='container-fluid logincontain '>\n                <Navbar/>\n                <div className='bgoverlay'>\n\n                    <h2 className=\"err-success text-center\">{this.state.errormessage}</h2>\n                    <h2 className=\"err-success text-center\">{this.state.successmessage}</h2>\n                    <h3 >Login</h3>\n\n                    <div className='row' >\n                        <form>\n                            <div className=\"form-group {validation.username.isInvalid && 'has-error'}\">\n                                <label for=\"username\">Username</label>\n                                <input type=\"text\" className=\"form-control\" id=\"username\"\n                                    placeholder=\"Username\" name='username' value={this.state.username}\n                                    onChange={this.handleInputChange} />\n                                <span className=\"help-block\">{validation.username.message}</span>\n\n                            </div>\n\n                            <div className=\"form-group {validation.password.isInvalid && 'has-error'}\">\n                                <label for=\"password\">Password</label>\n                                <input type=\"password\" className=\"form-control\"\n                                    id=\"password\" placeholder=\"Password\" name='password' value={this.state.password}\n                                    onChange={this.handleInputChange} />\n\n                                <span className=\"help-block\">{validation.password.message}</span>\n                            </div>\n\n\n                            <div>\n                                <button type=\"submit\" onClick={this.handleSubmit} className=\"btn btn-success\">Login</button>\n                                <span style={{ paddingLeft: 15 }}>Don't have an account? <a className=\"btn btn-link\" href=\"/signup\"> <button type=\"button\" className=\"btn btn-dark\" >\n                                    SIGN UP\n                    </button></a></span>\n\n\n                            </div>\n\n                        </form>\n\n                    </div>\n\n\n                </div>\n            </div>\n\n        );\n    }\n}\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}