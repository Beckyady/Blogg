{"ast":null,"code":"var _jsxFileName = \"/home/becky/Documents/Official Files/Blog/blogCli/src/components/CreatePost/CreatePost.js\";\nimport React from 'react';\nimport '../../assets/Styles/Styles.css';\nimport FormValidator from '../Validator/FormValidator';\nimport axios from 'axios';\nimport toastr from 'toastr';\nimport env from \"../../env\";\nimport { MDBRow, MDBCol, MDBCard, MDBCardBody, MDBBtn, MDBContainer, MDBIcon } from \"mdbreact\";\nexport default class CreateBlog extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleFormSubmit = async event => {\n      event.preventDefault();\n      const validation = this.validator.validate(this.state);\n      this.setState({\n        validation\n      });\n      this.submitted = true;\n\n      if (validation.isValid) {\n        try {\n          const token = localStorage.getItem('token');\n          const headers = {\n            'auth-token': token\n          };\n          const _this$state = this.state,\n                title = _this$state.title,\n                body = _this$state.body,\n                image_url = _this$state.image_url;\n          const postData = {\n            title,\n            body,\n            image_url\n          };\n          console.log(postData);\n          const res = await axios.post(\"\".concat(env.api, \"/posts\"), postData, {\n            headers: headers\n          });\n          toastr.options.positionClass = \"toast-top-center\";\n\n          if (res) {\n            setTimeout(() => toastr.success('New Post Successfully Created'), 2000);\n          }\n\n          this.props.history.push('/create-post');\n        } catch (err) {\n          toastr.error('An Error Occured, try again');\n        }\n      } else {\n        toastr.options.positionClass = \"toast-top-center\";\n        toastr.warning('Cannot Create Post Make sure all fields are correctly filled');\n      }\n    };\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handlePostSubmit = this.handleFormSubmit.bind(this);\n    this.validator = new FormValidator([{\n      field: 'title',\n      method: 'isEmpty',\n      validWhen: false,\n      message: 'Title is required'\n    }, {\n      field: 'body',\n      method: 'isEmpty',\n      validWhen: false,\n      message: 'Content is required'\n    }]);\n    this.state = {\n      title: '',\n      body: '',\n      author: '',\n      image_url: '',\n      likes: '',\n      validation: this.validator.valid(),\n      successmessage: '',\n      errormessage: ''\n    };\n  }\n\n  handleInputChange(event) {\n    event.preventDefault();\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  uploadWidget(event) {\n    const $this = this;\n    event.preventDefault();\n    window.cloudinary.openUploadWidget({\n      cloud_name: 'dxxm4ehaw',\n      upload_preset: 'ruvxhuuh',\n      tags: ['xmas']\n    }, (error, result) => {\n      console.log(result[0]);\n      $this.setState({\n        image_url: result[0].url\n      });\n    });\n  }\n\n  render() {\n    let validation = this.submitted ? // if the form has been submitted at least once\n    this.validator.validate(this.state) : // then check validity every time we render\n    this.state.validation;\n    return (// <MDBContainer className=\"backgroundCP\" fluid>\n      //     <MDBContainer >\n      //         <MDBRow>\n      //             <MDBCol md=\"12\">\n      //                 <MDBCard>\n      //                     <MDBCardBody>\n      //                         <form>\n      //                             <p className=\"h4 text-center py-4\">Create Post</p>\n      //                             <div >\n      //                                 <MDBBtn color=\"amber\" onClick={this.uploadWidget.bind(this)}> Click here to add image</MDBBtn>\n      //                             </div>\n      //                             <div className=\"{validation.title.isInvalid && 'has-error'}\">\n      //                                 <label htmlFor=\"title\" className=\"grey-text font-weight-light mt-4\" >\n      //                                     Enter Your Title\n      //                                 </label>\n      //                                 <input type=\"text\" className=\"form-control\" value={this.state.title} onChange={this.handleInputChange} />\n      //                                 <span className=\"help-block\">{validation.title.message}</span>\n      //                             </div>\n      //                             <br />\n      //                             <div className=\"{validation.body.isInvalid && 'has-error'}\">\n      //                             <label htmlFor=\"content\" className=\"grey-text font-weight-light\">\n      //                                 Type your Content\n      //                              </label>\n      //                             <textarea className=\"form-control\" rows=\"25\"  onChange={this.handleInputChange} value={this.state.body}  />\n      //                               <span className=\"help-block\">{validation.body.message}</span>\n      //                             </div>\n      //                             <div className=\"text-center py-4 mt-3\">\n      //                                 <MDBBtn className=\"btn btn-outline-purple\" type=\"submit\"  onClick={this.handleFormSubmit}>\n      //                                     Post\n      //                                     <MDBIcon far icon=\"paper-plane\" className=\"ml-2\" />\n      //                                 </MDBBtn>\n      //                             </div>\n      //                             <div className=\"text-center py-4 mt-3\">\n      //                             <MDBBtn outline color=\"danger\" href=\"/login\"> Cancel Post\n      //                             <MDBIcon far icon=\"paper-plane\" className=\"ml-2\" />\n      //                             </MDBBtn>\n      //                             </div>\n      //                         </form>\n      //                     </MDBCardBody>\n      //                 </MDBCard>\n      //             </MDBCol>\n      //         </MDBRow>\n      //     </MDBContainer>\n      // </MDBContainer>\n      React.createElement(\"div\", {\n        className: \"container createpostcontainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        className: \"err-success text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, this.state.errormessage), React.createElement(\"h2\", {\n        className: \"err-success text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, this.state.successmessage), React.createElement(\"div\", {\n        className: \"row createpostbody\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \" form-group uploadimg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.uploadWidget.bind(this),\n        className: \"upload-button btn btn-dark\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, \"Click here to add image\")), React.createElement(\"div\", {\n        className: \"form-group title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        className: \"titletext\",\n        name: \"title\",\n        placeholder: \"Enter your Title\",\n        value: this.state.title,\n        onChange: this.handleInputChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"help-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, validation.title.message)), React.createElement(\"div\", {\n        className: \"form-group body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, React.createElement(\"textarea\", {\n        className: \"bodytext\",\n        name: \"body\",\n        onChange: this.handleInputChange,\n        value: this.state.body,\n        placeholder: \"Create your Story\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"help-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, validation.body.message)), React.createElement(\"div\", {\n        className: \"form-group uploadbtn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"submit\",\n        onClick: this.handleFormSubmit,\n        className: \"btn btn-success\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, \"Create\"), React.createElement(\"a\", {\n        class: \"btn btn-danger cancelbtn\",\n        href: \"/\",\n        role: \"button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, \"Cancel\")))))\n    );\n  }\n\n}","map":{"version":3,"sources":["/home/becky/Documents/Official Files/Blog/blogCli/src/components/CreatePost/CreatePost.js"],"names":["React","FormValidator","axios","toastr","env","MDBRow","MDBCol","MDBCard","MDBCardBody","MDBBtn","MDBContainer","MDBIcon","CreateBlog","Component","constructor","props","handleFormSubmit","event","preventDefault","validation","validator","validate","state","setState","submitted","isValid","token","localStorage","getItem","headers","title","body","image_url","postData","console","log","res","post","api","options","positionClass","setTimeout","success","history","push","err","error","warning","handleInputChange","bind","handlePostSubmit","field","method","validWhen","message","author","likes","valid","successmessage","errormessage","target","name","value","uploadWidget","$this","window","cloudinary","openUploadWidget","cloud_name","upload_preset","tags","result","url","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../../assets/Styles/Styles.css';\nimport FormValidator from '../Validator/FormValidator';\nimport axios from 'axios';\nimport toastr from 'toastr';\nimport env from \"../../env\";\nimport { MDBRow, MDBCol, MDBCard, MDBCardBody, MDBBtn, MDBContainer, MDBIcon } from \"mdbreact\";\n\n\nexport default class CreateBlog extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handlePostSubmit = this.handleFormSubmit.bind(this);\n\n\n        this.validator = new FormValidator([\n\n            {\n                field: 'title',\n                method: 'isEmpty',\n                validWhen: false,\n                message: 'Title is required'\n            },\n            {\n                field: 'body',\n                method: 'isEmpty',\n                validWhen: false,\n                message: 'Content is required'\n            },\n\n        ]);\n\n        this.state = {\n            title: '',\n            body: '',\n            author: '',\n            image_url: '',\n            likes: '',\n            validation: this.validator.valid(),\n            successmessage: '',\n            errormessage: '',\n        }\n    }\n\n    handleInputChange(event) {\n        event.preventDefault();\n        this.setState({ [event.target.name]: event.target.value })\n\n    }\n\n\n    handleFormSubmit = async (event) => {\n        event.preventDefault();\n        const validation = this.validator.validate(this.state);\n        this.setState({ validation });\n        this.submitted = true;\n\n        if (validation.isValid) {\n            try {\n                const token = localStorage.getItem('token');\n                const headers = {\n                    'auth-token': token\n                };\n                const { title, body, image_url } = this.state;\n                const postData = {\n                    title,\n                    body,\n                    image_url\n                };\n                console.log(postData)\n                const res = await axios.post(`${env.api}/posts`, postData, { headers: headers });\n                toastr.options.positionClass = \"toast-top-center\";\n\n                if (res) {\n                    setTimeout(() =>\n\n                        toastr.success('New Post Successfully Created'), 2000)\n                }\n                this.props.history.push('/create-post');\n\n            } catch (err) {\n                toastr.error('An Error Occured, try again')\n\n            }\n\n        } else {\n            toastr.options.positionClass = \"toast-top-center\"\n\n            toastr.warning('Cannot Create Post Make sure all fields are correctly filled')\n\n        }\n    }\n\n    uploadWidget(event) {\n        const $this = this;\n        event.preventDefault();\n        window.cloudinary.openUploadWidget({ cloud_name: 'dxxm4ehaw', upload_preset: 'ruvxhuuh', tags: ['xmas'] },\n            (error, result) => {\n                console.log(result[0]);\n                $this.setState({ image_url: result[0].url });\n            });\n    }\n    render() {\n\n        let validation = this.submitted ?           // if the form has been submitted at least once\n            this.validator.validate(this.state) :   // then check validity every time we render\n            this.state.validation\n        return (\n            // <MDBContainer className=\"backgroundCP\" fluid>\n\n            //     <MDBContainer >\n            //         <MDBRow>\n            //             <MDBCol md=\"12\">\n            //                 <MDBCard>\n            //                     <MDBCardBody>\n            //                         <form>\n            //                             <p className=\"h4 text-center py-4\">Create Post</p>\n\n            //                             <div >\n            //                                 <MDBBtn color=\"amber\" onClick={this.uploadWidget.bind(this)}> Click here to add image</MDBBtn>\n\n            //                             </div>\n\n            //                             <div className=\"{validation.title.isInvalid && 'has-error'}\">\n            //                                 <label htmlFor=\"title\" className=\"grey-text font-weight-light mt-4\" >\n            //                                     Enter Your Title\n            //                                 </label>\n            //                                 <input type=\"text\" className=\"form-control\" value={this.state.title} onChange={this.handleInputChange} />\n            //                                 <span className=\"help-block\">{validation.title.message}</span>\n            //                             </div>\n            //                             <br />\n\n            //                             <div className=\"{validation.body.isInvalid && 'has-error'}\">\n            //                             <label htmlFor=\"content\" className=\"grey-text font-weight-light\">\n            //                                 Type your Content\n            //                              </label>\n            //                             <textarea className=\"form-control\" rows=\"25\"  onChange={this.handleInputChange} value={this.state.body}  />\n            //                               <span className=\"help-block\">{validation.body.message}</span>\n\n            //                             </div>\n                                       \n            //                             <div className=\"text-center py-4 mt-3\">\n            //                                 <MDBBtn className=\"btn btn-outline-purple\" type=\"submit\"  onClick={this.handleFormSubmit}>\n            //                                     Post\n            //                                     <MDBIcon far icon=\"paper-plane\" className=\"ml-2\" />\n            //                                 </MDBBtn>\n            //                             </div>\n            //                             <div className=\"text-center py-4 mt-3\">\n            //                             <MDBBtn outline color=\"danger\" href=\"/login\"> Cancel Post\n            //                             <MDBIcon far icon=\"paper-plane\" className=\"ml-2\" />\n\n            //                             </MDBBtn>\n\n            //                             </div>\n            //                         </form>\n            //                     </MDBCardBody>\n                               \n            //                 </MDBCard>\n            //             </MDBCol>\n            //         </MDBRow>\n            //     </MDBContainer>\n\n            // </MDBContainer>\n            <div className='container createpostcontainer'>\n                <h2 className=\"err-success text-center\">{this.state.errormessage}</h2>\n                <h2 className=\"err-success text-center\">{this.state.successmessage}</h2>\n                <div className='row createpostbody'>\n                    <form>\n                        <div className=' form-group uploadimg' >\n                            <button onClick={this.uploadWidget.bind(this)} className=\"upload-button btn btn-dark\">\n                               Click here to add image\n                    </button>\n\n                        </div>\n\n                        <div className='form-group title'>\n                            <input className='titletext' name='title'\n                                placeholder='Enter your Title' value={this.state.title}\n                                onChange={this.handleInputChange} />\n\n                            <span className=\"help-block\">{validation.title.message}</span>\n\n                        </div>\n\n                        <div className='form-group body'>\n                            <textarea className='bodytext' name='body'\n                                onChange={this.handleInputChange} value={this.state.body} placeholder='Create your Story' >\n\n                            </textarea>\n                            <span className=\"help-block\">{validation.body.message}</span>\n\n                        </div>\n\n                        <div className='form-group uploadbtn'>\n                            <button type=\"submit\" onClick={this.handleFormSubmit}\n                                className=\"btn btn-success\">Create</button>\n\n                                <a class=\"btn btn-danger cancelbtn\" href=\"/\" role=\"button\">Cancel</a>\n                        </div>\n                    </form>\n\n                </div>\n\n            </div>\n        )\n    }\n}\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}