{"ast":null,"code":"var _jsxFileName = \"/home/becky/Documents/Official Files/Blog/blogCli/src/components/Accounts/Login.js\";\nimport React from 'react';\nimport '../../assets/Styles/Styles.css';\nimport FormValidator from '../Validator/FormValidator';\nimport axios from 'axios';\nimport toastr from 'toastr';\nimport env from \"../../env\";\nimport Navbar from \"../navbar/Navbar\";\nimport { MDBRow, MDBCol, MDBCardBody, MDBBtn, MDBContainer, MDBCard, MDBModalFooter, MDBIcon, MDBCardHeader } from \"mdbreact\";\nexport default class Login extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = async event => {\n      event.preventDefault();\n      const validation = this.validator.validate(this.state);\n      this.setState({\n        validation\n      });\n      this.submitted = true;\n\n      if (validation.isValid) {\n        try {\n          const res = await axios.post(\"\".concat(env.api, \"/users/login\"), this.state);\n          const token = res.data.data.token;\n          localStorage.setItem('token', token);\n          this.props.history.push('/create-post');\n          console.log(res);\n        } catch (err) {\n          toastr.options.positionClass = \"toast-top-center\";\n          toastr.error('Invalid Credentials, try again');\n        }\n      } else {\n        toastr.options.positionClass = \"toast-top-center\";\n        toastr.warning('Cannot Log In User Make sure all fields are correctly filled');\n      }\n    };\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.validator = new FormValidator([{\n      field: 'username',\n      method: 'isEmpty',\n      validWhen: false,\n      message: 'Username is required'\n    }, {\n      field: 'username',\n      method: 'matches',\n      args: [/^[a-z0-9A-Z\\s]*$/],\n      validWhen: true,\n      message: 'Username can only contain letters and numbers'\n    }, {\n      field: 'password',\n      method: 'isEmpty',\n      validWhen: false,\n      message: 'Password is required'\n    }]);\n    this.state = {\n      username: '',\n      password: '',\n      validation: this.validator.valid(),\n      successmessage: '',\n      errormessage: ''\n    };\n    this.submitted = false;\n  }\n\n  handleInputChange(event) {\n    event.preventDefault();\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  componentDidMount() {\n    const token = localStorage.getItem('token');\n    if (token) return this.props.history.push('/login');\n  }\n\n  render() {\n    let validation = this.submitted ? // if the form has been submitted at least once\n    this.validator.validate(this.state) : // then check validity every time we render\n    this.state.validation;\n    return React.createElement(MDBContainer, {\n      fluid: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \" logincontain \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"bgoverlay\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      className: \"err-success text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, this.state.errormessage), React.createElement(\"h2\", {\n      className: \"err-success text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, this.state.successmessage), React.createElement(MDBContainer, {\n      className: \"login\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(MDBRow, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(MDBCol, {\n      md: \"6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(MDBCard, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(MDBCardBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(MDBCardHeader, {\n      className: \"form-header sunny-morning-gradient rounded\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      className: \"my-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(MDBIcon, {\n      icon: \"lock\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }), \" Login:\")), React.createElement(\"div\", {\n      className: \"{validation.username.isInvalid && 'has-error'}\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"defaultForUsername\",\n      className: \"grey-text font-weight-light\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \"Your Username \"), React.createElement(\"input\", {\n      type: \"text\",\n      id: \"username\",\n      className: \"form-control\",\n      name: \"username\",\n      value: this.state.username,\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"help-block\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, validation.username.message)), React.createElement(\"div\", {\n      className: \"{validation.password.isInvalid && 'has-error'}\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"defaultFormPasswordEx\",\n      className: \"grey-text font-weight-light\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \" Your password \"), React.createElement(\"input\", {\n      type: \"password\",\n      id: \"password\",\n      className: \"form-control\",\n      name: \"password\",\n      value: this.state.password,\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"help-block\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, validation.password.message)), React.createElement(\"div\", {\n      className: \"text-center mt-4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(MDBBtn, {\n      color: \"yellow darken-2\",\n      className: \"mb-3\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"Login\"), React.createElement(\"div\", {\n      className: \"font-weight-light\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, \"Not a member? Sign Up\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, \"ForgotPassword?\"))), React.createElement(MDBModalFooter, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    })))))))));\n  }\n\n}","map":{"version":3,"sources":["/home/becky/Documents/Official Files/Blog/blogCli/src/components/Accounts/Login.js"],"names":["React","FormValidator","axios","toastr","env","Navbar","MDBRow","MDBCol","MDBCardBody","MDBBtn","MDBContainer","MDBCard","MDBModalFooter","MDBIcon","MDBCardHeader","Login","Component","constructor","props","handleSubmit","event","preventDefault","validation","validator","validate","state","setState","submitted","isValid","res","post","api","token","data","localStorage","setItem","history","push","console","log","err","options","positionClass","error","warning","handleInputChange","bind","field","method","validWhen","message","args","username","password","valid","successmessage","errormessage","target","name","value","componentDidMount","getItem","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../../assets/Styles/Styles.css'\nimport FormValidator from '../Validator/FormValidator';\nimport axios from 'axios';\nimport toastr from 'toastr';\nimport env from \"../../env\";\nimport Navbar from \"../navbar/Navbar\";\nimport {\n  MDBRow, MDBCol, MDBCardBody, MDBBtn, MDBContainer, MDBCard, MDBModalFooter, MDBIcon, MDBCardHeader,\n} from \"mdbreact\";\n\n\n\n\n\nexport default class Login extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n\n\n    this.validator = new FormValidator([\n\n      {\n        field: 'username',\n        method: 'isEmpty',\n        validWhen: false,\n        message: 'Username is required'\n      },\n      {\n        field: 'username',\n        method: 'matches',\n        args: [/^[a-z0-9A-Z\\s]*$/],\n        validWhen: true,\n        message: 'Username can only contain letters and numbers'\n      },\n      {\n        field: 'password',\n        method: 'isEmpty',\n        validWhen: false,\n        message: 'Password is required'\n      }\n    ])\n\n    this.state = {\n      username: '',\n      password: '',\n      validation: this.validator.valid(),\n      successmessage: '',\n      errormessage: '',\n\n    };\n    this.submitted = false;\n  }\n\n  handleInputChange(event) {\n    event.preventDefault()\n    this.setState({ [event.target.name]: event.target.value });\n  }\n\n  handleSubmit = async (event) => {\n    event.preventDefault();\n\n    const validation = this.validator.validate(this.state);\n    this.setState({ validation });\n    this.submitted = true;\n\n    if (validation.isValid) {\n      try {\n        const res = await axios.post(`${env.api}/users/login`, this.state);\n        const token = res.data.data.token;\n\n        localStorage.setItem('token', token);\n\n        this.props.history.push('/create-post');\n        console.log(res);\n      } catch (err) {\n        toastr.options.positionClass = \"toast-top-center\";\n        toastr.error('Invalid Credentials, try again');\n      }\n    }\n    else {\n      toastr.options.positionClass = \"toast-top-center\";\n\n      toastr.warning('Cannot Log In User Make sure all fields are correctly filled');\n    }\n\n  }\n\n  componentDidMount() {\n    const token = localStorage.getItem('token');\n\n    if (token) return this.props.history.push('/login');\n  }\n\n\n\n  render() {\n    let validation = this.submitted ?        // if the form has been submitted at least once\n      this.validator.validate(this.state) :   // then check validity every time we render\n      this.state.validation;\n    return (\n      <MDBContainer fluid >\n        <Navbar />\n\n\n        <div className=' logincontain '>\n\n          <div className='bgoverlay'>\n\n            <h2 className=\"err-success text-center\">{this.state.errormessage}</h2>\n            <h2 className=\"err-success text-center\">{this.state.successmessage}</h2>\n            <MDBContainer className=\"login\">\n              <MDBRow>\n                <MDBCol md=\"6\">\n                  <MDBCard>\n                    <MDBCardBody>\n                      <MDBCardHeader className=\"form-header sunny-morning-gradient rounded\">\n                        <h3 className=\"my-3\">\n                          <MDBIcon icon=\"lock\" /> Login:\n                         </h3>\n                      </MDBCardHeader>\n                      <div className=\"{validation.username.isInvalid && 'has-error'}\">\n                        <label htmlFor=\"defaultForUsername\" className=\"grey-text font-weight-light\"  >Your Username </label>\n                        <input type=\"text\" id=\"username\" className=\"form-control\" name='username' value={this.state.username} onChange={this.handleInputChange}\n                        />\n                        <span className=\"help-block\">{validation.username.message}</span>\n\n                      </div>\n\n                      <div className=\"{validation.password.isInvalid && 'has-error'}\">\n                        <label htmlFor=\"defaultFormPasswordEx\" className=\"grey-text font-weight-light\"> Your password </label>\n\n                        <input type=\"password\" id=\"password\" className=\"form-control\" name='password' value={this.state.password} onChange={this.handleInputChange} />\n                        <span className=\"help-block\">{validation.password.message}</span>\n                      </div>\n\n\n                      <div className=\"text-center mt-4\">\n                        <MDBBtn color=\"yellow darken-2\" className=\"mb-3\" type=\"submit\">\n                          Login\n                        </MDBBtn>\n                        <div className=\"font-weight-light\">\n                          <p>Not a member? Sign Up</p>\n                          <p>ForgotPassword?</p>\n                        </div>\n                      </div>\n\n                      <MDBModalFooter>\n\n                      </MDBModalFooter>\n                    </MDBCardBody>\n                  </MDBCard>\n                </MDBCol>\n              </MDBRow>\n            </MDBContainer>\n\n            {/* <div className='row' >\n                            <form>\n                                <div className=\"form-group {validation.username.isInvalid && 'has-error'}\">\n                                    <label for=\"username\">Username</label>\n                                    <input type=\"text\" className=\"form-control\" id=\"username\"\n                                        placeholder=\"Username\" name='username' value={this.state.username}\n                                        onChange={this.handleInputChange} />\n                                    <span className=\"help-block\">{validation.username.message}</span>\n\n                                </div>\n\n                                <div className=\"form-group {validation.password.isInvalid && 'has-error'}\">\n                                    <label for=\"password\">Password</label>\n                                    <input type=\"password\" className=\"form-control\"\n                                        id=\"password\" placeholder=\"Password\" name='password' value={this.state.password}\n                                        onChange={this.handleInputChange} />\n\n                                    <span className=\"help-block\">{validation.password.message}</span>\n                                </div>\n\n\n                                <div>\n                                    <button type=\"submit\" onClick={this.handleSubmit} className=\"btn btn-success\">Login</button>\n                                    <span style={{ paddingLeft: 15 }}>Don't have an account? <a className=\"btn btn-link\" href=\"/signup\"> <button type=\"button\" className=\"btn btn-dark\" >\n                                        SIGN UP\n                    </button></a></span>\n\n\n                                </div>\n\n                            </form>\n\n                        </div> */}\n\n\n          </div>\n        </div>\n\n      </MDBContainer>\n\n    );\n  }\n}\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}