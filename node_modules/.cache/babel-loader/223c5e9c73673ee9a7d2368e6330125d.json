{"ast":null,"code":"var _jsxFileName = \"/home/becky/Documents/Official Files/Blog/blogCli/src/components/Accounts/Login.js\";\nimport React from 'react';\nimport '../../assets/Styles/Styles.css';\nimport FormValidator from '../Validator/FormValidator';\nimport axios from 'axios';\nimport toastr from 'toastr';\nimport env from \"../../env\";\nimport Navbar from \"../navbar/Navbar\";\nimport { MDBRow, MDBCol, MDBCardBody, MDBBtn, MDBContainer, MDBCard, MDBModalFooter, MDBIcon, MDBCardHeader } from \"mdbreact\";\nexport default class Login extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = async event => {\n      event.preventDefault();\n      const validation = this.validator.validate(this.state);\n      this.setState({\n        validation\n      });\n      this.submitted = true;\n\n      if (validation.isValid) {\n        try {\n          const res = await axios.post(\"\".concat(env.api, \"/users/login\"), this.state);\n          const token = res.data.data.token;\n          localStorage.setItem('token', token);\n          this.props.history.push('/create-post');\n          console.log(res);\n        } catch (err) {\n          toastr.options.positionClass = \"toast-top-center\";\n          toastr.error('Invalid Credentials, try again');\n        }\n      } else {\n        toastr.options.positionClass = \"toast-top-center\";\n        toastr.warning('Cannot Log In User Make sure all fields are correctly filled');\n      }\n    };\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.validator = new FormValidator([{\n      field: 'username',\n      method: 'isEmpty',\n      validWhen: false,\n      message: 'Username is required'\n    }, {\n      field: 'username',\n      method: 'matches',\n      args: [/^[a-z0-9A-Z\\s]*$/],\n      validWhen: true,\n      message: 'Username can only contain letters and numbers'\n    }, {\n      field: 'password',\n      method: 'isEmpty',\n      validWhen: false,\n      message: 'Password is required'\n    }]);\n    this.state = {\n      username: '',\n      password: '',\n      validation: this.validator.valid(),\n      successmessage: '',\n      errormessage: ''\n    };\n    this.submitted = false;\n  }\n\n  handleInputChange(event) {\n    event.preventDefault();\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  componentDidMount() {\n    const token = localStorage.getItem('token');\n    if (token) return this.props.history.push('/login');\n  }\n\n  render() {\n    let validation = this.submitted ? // if the form has been submitted at least once\n    this.validator.validate(this.state) : // then check validity every time we render\n    this.state.validation;\n    return React.createElement(MDBContainer, {\n      fluid: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \" logincontain \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"bgoverlay\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      className: \"err-success text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, this.state.errormessage), React.createElement(\"h2\", {\n      className: \"err-success text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, this.state.successmessage), React.createElement(MDBContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(MDBRow, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, React.createElement(MDBCol, {\n      md: \"6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, React.createElement(MDBCard, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(MDBCardBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"h4 text-center py-4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, \"Subscribe\"), React.createElement(\"label\", {\n      htmlFor: \"defaultFormCardNameEx\",\n      className: \"grey-text font-weight-light\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, \"Your name\"), React.createElement(\"input\", {\n      type: \"text\",\n      id: \"defaultFormCardNameEx\",\n      className: \"form-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"defaultFormCardEmailEx\",\n      className: \"grey-text font-weight-light\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, \"Your email\"), React.createElement(\"input\", {\n      type: \"email\",\n      id: \"defaultFormCardEmailEx\",\n      className: \"form-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"text-center py-4 mt-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, React.createElement(MDBBtn, {\n      className: \"btn btn-outline-purple\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, \"Send\", React.createElement(MDBIcon, {\n      far: true,\n      icon: \"paper-plane\",\n      className: \"ml-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }))))))))))));\n  }\n\n}","map":{"version":3,"sources":["/home/becky/Documents/Official Files/Blog/blogCli/src/components/Accounts/Login.js"],"names":["React","FormValidator","axios","toastr","env","Navbar","MDBRow","MDBCol","MDBCardBody","MDBBtn","MDBContainer","MDBCard","MDBModalFooter","MDBIcon","MDBCardHeader","Login","Component","constructor","props","handleSubmit","event","preventDefault","validation","validator","validate","state","setState","submitted","isValid","res","post","api","token","data","localStorage","setItem","history","push","console","log","err","options","positionClass","error","warning","handleInputChange","bind","field","method","validWhen","message","args","username","password","valid","successmessage","errormessage","target","name","value","componentDidMount","getItem","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,gCAAP;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,GAAP,MAAgB,WAAhB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,SAASC,MAAT,EAAiBC,MAAjB,EAAyBC,WAAzB,EAAsCC,MAAtC,EAA8CC,YAA9C,EAA6DC,OAA7D,EAAsEC,cAAtE,EAAsFC,OAAtF,EAA+FC,aAA/F,QACY,UADZ;AAOA,eAAe,MAAMC,KAAN,SAAoBf,KAAK,CAACgB,SAA1B,CAAoC;AAE/CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SA8CnBC,YA9CmB,GA8CJ,MAAOC,KAAP,IAAiB;AAC5BA,MAAAA,KAAK,CAACC,cAAN;AAEA,YAAMC,UAAU,GAAG,KAAKC,SAAL,CAAeC,QAAf,CAAwB,KAAKC,KAA7B,CAAnB;AACA,WAAKC,QAAL,CAAc;AAAEJ,QAAAA;AAAF,OAAd;AACA,WAAKK,SAAL,GAAiB,IAAjB;;AAEA,UAAIL,UAAU,CAACM,OAAf,EAAwB;AACpB,YAAI;AACA,gBAAMC,GAAG,GAAG,MAAM3B,KAAK,CAAC4B,IAAN,WAAc1B,GAAG,CAAC2B,GAAlB,mBAAqC,KAAKN,KAA1C,CAAlB;AACA,gBAAMO,KAAK,GAAGH,GAAG,CAACI,IAAJ,CAASA,IAAT,CAAcD,KAA5B;AAEAE,UAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BH,KAA9B;AAEA,eAAKd,KAAL,CAAWkB,OAAX,CAAmBC,IAAnB,CAAwB,cAAxB;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAYV,GAAZ;AACH,SARD,CAQE,OAAOW,GAAP,EAAY;AACVrC,UAAAA,MAAM,CAACsC,OAAP,CAAeC,aAAf,GAA+B,kBAA/B;AACAvC,UAAAA,MAAM,CAACwC,KAAP,CAAa,gCAAb;AACH;AACJ,OAbD,MAcK;AACDxC,QAAAA,MAAM,CAACsC,OAAP,CAAeC,aAAf,GAA+B,kBAA/B;AAEAvC,QAAAA,MAAM,CAACyC,OAAP,CAAe,8DAAf;AACH;AAEJ,KAzEkB;;AAGf,SAAKC,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CAAzB;AACA,SAAK3B,YAAL,GAAoB,KAAKA,YAAL,CAAkB2B,IAAlB,CAAuB,IAAvB,CAApB;AAGA,SAAKvB,SAAL,GAAiB,IAAItB,aAAJ,CAAkB,CAE/B;AACI8C,MAAAA,KAAK,EAAE,UADX;AAEIC,MAAAA,MAAM,EAAE,SAFZ;AAGIC,MAAAA,SAAS,EAAE,KAHf;AAIIC,MAAAA,OAAO,EAAE;AAJb,KAF+B,EAQ/B;AACIH,MAAAA,KAAK,EAAE,UADX;AAEIC,MAAAA,MAAM,EAAE,SAFZ;AAGIG,MAAAA,IAAI,EAAE,CAAC,kBAAD,CAHV;AAIIF,MAAAA,SAAS,EAAE,IAJf;AAKIC,MAAAA,OAAO,EAAE;AALb,KAR+B,EAe/B;AACIH,MAAAA,KAAK,EAAE,UADX;AAEIC,MAAAA,MAAM,EAAE,SAFZ;AAGIC,MAAAA,SAAS,EAAE,KAHf;AAIIC,MAAAA,OAAO,EAAE;AAJb,KAf+B,CAAlB,CAAjB;AAuBA,SAAKzB,KAAL,GAAa;AACT2B,MAAAA,QAAQ,EAAE,EADD;AAETC,MAAAA,QAAQ,EAAE,EAFD;AAGT/B,MAAAA,UAAU,EAAE,KAAKC,SAAL,CAAe+B,KAAf,EAHH;AAITC,MAAAA,cAAc,EAAE,EAJP;AAKTC,MAAAA,YAAY,EAAE;AALL,KAAb;AAQA,SAAK7B,SAAL,GAAiB,KAAjB;AACH;;AAEDkB,EAAAA,iBAAiB,CAACzB,KAAD,EAAQ;AACrBA,IAAAA,KAAK,CAACC,cAAN;AACA,SAAKK,QAAL,CAAc;AAAE,OAACN,KAAK,CAACqC,MAAN,CAAaC,IAAd,GAAqBtC,KAAK,CAACqC,MAAN,CAAaE;AAApC,KAAd;AACH;;AA+BDC,EAAAA,iBAAiB,GAAG;AAChB,UAAM5B,KAAK,GAAGE,YAAY,CAAC2B,OAAb,CAAqB,OAArB,CAAd;AAEA,QAAI7B,KAAJ,EAAW,OAAO,KAAKd,KAAL,CAAWkB,OAAX,CAAmBC,IAAnB,CAAwB,QAAxB,CAAP;AACd;;AAIDyB,EAAAA,MAAM,GAAG;AACL,QAAIxC,UAAU,GAAG,KAAKK,SAAL,GAAwB;AACrC,SAAKJ,SAAL,CAAeC,QAAf,CAAwB,KAAKC,KAA7B,CADa,GAC2B;AACxC,SAAKA,KAAL,CAAWH,UAFf;AAGA,WACI,oBAAC,YAAD;AAAc,MAAA,KAAK,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAII;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI;AAAI,MAAA,SAAS,EAAC,yBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAyC,KAAKG,KAAL,CAAW+B,YAApD,CAFJ,EAGI;AAAI,MAAA,SAAS,EAAC,yBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAyC,KAAK/B,KAAL,CAAW8B,cAApD,CAHJ,EA2DhB,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAQ,MAAA,EAAE,EAAC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAG,MAAA,SAAS,EAAC,qBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEE;AACE,MAAA,OAAO,EAAC,uBADV;AAEE,MAAA,SAAS,EAAC,6BAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAFF,EAQE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,EAAE,EAAC,uBAFL;AAGE,MAAA,SAAS,EAAC,cAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARF,EAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbF,EAcE;AACE,MAAA,OAAO,EAAC,wBADV;AAEE,MAAA,SAAS,EAAC,6BAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAdF,EAoBE;AACE,MAAA,IAAI,EAAC,OADP;AAEE,MAAA,EAAE,EAAC,wBAFL;AAGE,MAAA,SAAS,EAAC,cAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MApBF,EAyBE;AAAK,MAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAQ,MAAA,SAAS,EAAC,wBAAlB;AAA2C,MAAA,IAAI,EAAC,QAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAEE,oBAAC,OAAD;AAAS,MAAA,GAAG,MAAZ;AAAa,MAAA,IAAI,EAAC,aAAlB;AAAgC,MAAA,SAAS,EAAC,MAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF,CAzBF,CADF,CADF,CADF,CADF,CADF,CA3DgB,CAFJ,CAJJ,CADJ;AAwJH;;AAjP8C","sourcesContent":["import React from 'react';\nimport '../../assets/Styles/Styles.css'\nimport FormValidator from '../Validator/FormValidator';\nimport axios from 'axios';\nimport toastr from 'toastr';\nimport env from \"../../env\";\nimport Navbar from \"../navbar/Navbar\";\nimport { MDBRow, MDBCol, MDBCardBody, MDBBtn, MDBContainer,  MDBCard, MDBModalFooter, MDBIcon, MDBCardHeader,\n     } from \"mdbreact\";\n\n\n\n\n\nexport default class Login extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n\n\n        this.validator = new FormValidator([\n\n            {\n                field: 'username',\n                method: 'isEmpty',\n                validWhen: false,\n                message: 'Username is required'\n            },\n            {\n                field: 'username',\n                method: 'matches',\n                args: [/^[a-z0-9A-Z\\s]*$/],\n                validWhen: true,\n                message: 'Username can only contain letters and numbers'\n            },\n            {\n                field: 'password',\n                method: 'isEmpty',\n                validWhen: false,\n                message: 'Password is required'\n            }\n        ])\n\n        this.state = {\n            username: '',\n            password: '',\n            validation: this.validator.valid(),\n            successmessage: '',\n            errormessage: '',\n\n        };\n        this.submitted = false;\n    }\n\n    handleInputChange(event) {\n        event.preventDefault()\n        this.setState({ [event.target.name]: event.target.value });\n    }\n\n    handleSubmit = async (event) => {\n        event.preventDefault();\n\n        const validation = this.validator.validate(this.state);\n        this.setState({ validation });\n        this.submitted = true;\n\n        if (validation.isValid) {\n            try {\n                const res = await axios.post(`${env.api}/users/login`, this.state);\n                const token = res.data.data.token;\n\n                localStorage.setItem('token', token);\n\n                this.props.history.push('/create-post');\n                console.log(res);\n            } catch (err) {\n                toastr.options.positionClass = \"toast-top-center\";\n                toastr.error('Invalid Credentials, try again');\n            }\n        }\n        else {\n            toastr.options.positionClass = \"toast-top-center\";\n\n            toastr.warning('Cannot Log In User Make sure all fields are correctly filled');\n        }\n\n    }\n\n    componentDidMount() {\n        const token = localStorage.getItem('token');\n\n        if (token) return this.props.history.push('/login');\n    }\n\n\n\n    render() {\n        let validation = this.submitted ?        // if the form has been submitted at least once\n            this.validator.validate(this.state) :   // then check validity every time we render\n            this.state.validation;\n        return (\n            <MDBContainer fluid >\n                <Navbar />\n\n\n                <div className=' logincontain '>\n\n                    <div className='bgoverlay'>\n\n                        <h2 className=\"err-success text-center\">{this.state.errormessage}</h2>\n                        <h2 className=\"err-success text-center\">{this.state.successmessage}</h2>\n                        {/* <MDBContainer className=\"login\">\n      <MDBRow>\n        <MDBCol md=\"6\">\n          <MDBCard>\n            <MDBCardBody>\n              <MDBCardHeader className=\"form-header sunny-morning-gradient rounded\">\n                <h3 className=\"my-3\">\n                  <MDBIcon icon=\"lock\" /> Login:\n                </h3>\n              </MDBCardHeader>\n              <label\n                htmlFor=\"defaultFormEmailEx\"\n                className=\"grey-text font-weight-light\"\n              >\n                Your email\n              </label>\n              <input\n                type=\"email\"\n                id=\"defaultFormEmailEx\"\n                className=\"form-control\"\n              />\n\n              <label\n                htmlFor=\"defaultFormPasswordEx\"\n                className=\"grey-text font-weight-light\"\n              >\n                Your password\n              </label>\n              <input\n                type=\"password\"\n                id=\"defaultFormPasswordEx\"\n                className=\"form-control\"\n              />\n\n              <div className=\"text-center mt-4\">\n                <MDBBtn color=\"yellow darken-2\" className=\"mb-3\" type=\"submit\">\n                  Login\n                </MDBBtn>\n                <div className=\"font-weight-light\">\n                  <p>Not a member? Sign Up</p>\n                  <p>ForgotPassword?</p>\n                </div>\n              </div>\n\n              <MDBModalFooter>\n                <div className=\"font-weight-\">\n                  <p>Not a member? Sign Up</p>\n                  <p>ForgotPassword?</p>\n                </div>\n              </MDBModalFooter>\n            </MDBCardBody>\n          </MDBCard>\n        </MDBCol>\n      </MDBRow>\n    </MDBContainer> */}\n    <MDBContainer>\n      <MDBRow>\n        <MDBCol md=\"6\">\n          <MDBCard>\n            <MDBCardBody>\n              <form>\n                <p className=\"h4 text-center py-4\">Subscribe</p>\n                <label\n                  htmlFor=\"defaultFormCardNameEx\"\n                  className=\"grey-text font-weight-light\"\n                >\n                  Your name\n                </label>\n                <input\n                  type=\"text\"\n                  id=\"defaultFormCardNameEx\"\n                  className=\"form-control\"\n                />\n                <br />\n                <label\n                  htmlFor=\"defaultFormCardEmailEx\"\n                  className=\"grey-text font-weight-light\"\n                >\n                  Your email\n                </label>\n                <input\n                  type=\"email\"\n                  id=\"defaultFormCardEmailEx\"\n                  className=\"form-control\"\n                />\n                <div className=\"text-center py-4 mt-3\">\n                  <MDBBtn className=\"btn btn-outline-purple\" type=\"submit\">\n                    Send\n                    <MDBIcon far icon=\"paper-plane\" className=\"ml-2\" />\n                  </MDBBtn>\n                </div>\n              \n              </form>\n            \n            </MDBCardBody>\n          </MDBCard>\n        </MDBCol>\n      </MDBRow>\n    </MDBContainer>\n\n                        {/* <div className='row' >\n                            <form>\n                                <div className=\"form-group {validation.username.isInvalid && 'has-error'}\">\n                                    <label for=\"username\">Username</label>\n                                    <input type=\"text\" className=\"form-control\" id=\"username\"\n                                        placeholder=\"Username\" name='username' value={this.state.username}\n                                        onChange={this.handleInputChange} />\n                                    <span className=\"help-block\">{validation.username.message}</span>\n\n                                </div>\n\n                                <div className=\"form-group {validation.password.isInvalid && 'has-error'}\">\n                                    <label for=\"password\">Password</label>\n                                    <input type=\"password\" className=\"form-control\"\n                                        id=\"password\" placeholder=\"Password\" name='password' value={this.state.password}\n                                        onChange={this.handleInputChange} />\n\n                                    <span className=\"help-block\">{validation.password.message}</span>\n                                </div>\n\n\n                                <div>\n                                    <button type=\"submit\" onClick={this.handleSubmit} className=\"btn btn-success\">Login</button>\n                                    <span style={{ paddingLeft: 15 }}>Don't have an account? <a className=\"btn btn-link\" href=\"/signup\"> <button type=\"button\" className=\"btn btn-dark\" >\n                                        SIGN UP\n                    </button></a></span>\n\n\n                                </div>\n\n                            </form>\n\n                        </div> */}\n\n\n                    </div>\n                </div>\n\n            </MDBContainer>\n\n        );\n    }\n}\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}